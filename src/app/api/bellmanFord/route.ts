import cytoscape, { Core } from "cytoscape";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  const { graph, startNodeId, endNodeId } = await req.json();

  const cy = cytoscape({
    elements: graph.elements,
  });

  function bellmanFord(cy: Core, startNodeId: string, endNodeId: string) {
    let distances: { [key: string]: number } = {};
    let prev: { [key: string]: string | null } = {};
    let frames: any[] = [];
    const startNodeTitle: string = cy.getElementById(startNodeId).data("title");
    const endNodeTitle: string = cy.getElementById(endNodeId).data("title");
    let stepByStepExplanation: string[] = [`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–µ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã "${startNodeTitle}", —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω - ‚àû`];
    let sortedEdges = cy.edges().sort((a, b) => {
      const aIds = a.id().split('-').map(Number);
      const bIds = b.id().split('-').map(Number);

      if (aIds[0] !== bIds[0]) {
        return aIds[0] - bIds[0];
      }

      return aIds[1] - bIds[1];
    });
    let edges = sortedEdges.map((edge) => ({
      edgeId: edge.id(),
      source: edge.data("source"),
      target: edge.data("target"),
      weight: edge.data("weight"),
      directed: edge.hasClass("oriented"),
    }));
    let nodes = cy.nodes().map((node) => node.id());

    nodes.forEach((nodeId) => {
      distances[nodeId] = nodeId === startNodeId ? 0 : Infinity;
      prev[nodeId] = null;
    });

    frames.push({
      currentEdge: "",
      nextNode: "",
      paths: Object.keys(distances).reduce(
        (acc: { [key: string]: string }, key) => {
          acc[key] =
            distances[key] === Infinity
              ? "‚àû"
              : distances[key].toString();
          return acc;
        },
        {}
      ),
      pathUpdateInfo: "",
      pathNodes: [],
      pathEdges: [],
    });

    for (let i = 0; i < nodes.length - 1; i++) {
      let updated = false;
      //stepByStepExplanation.push(`–ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}: —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤—Å–µ —Ä—ë–±—Ä–∞ –≥—Ä–∞—Ñ–∞`)

      edges.forEach(({ edgeId, source, target, weight, directed }) => {
        if (directed) {
          let sourceTitle = cy.getElementById(source).data("title");
          let targetTitle = cy.getElementById(target).data("title");
          let edgeTitle = cy.getElementById(edgeId).data("title");
          if (!edgeTitle && edgeId) {
            edgeTitle = `${sourceTitle}-${targetTitle}`;
          }

          let alt = distances[source] + weight;
          let pathComparsion = `${distances[source] === Infinity ? "‚àû" : distances[source]} + ${weight} ${
            alt < distances[target] ? "<" : ">"
          } ${
            distances[target] === Infinity ? "‚àû" : distances[target]
          }`;

          frames.push({
            currentEdge: edgeId,
            nextNode: target,
            paths: Object.keys(distances).reduce(
              (acc: { [key: string]: string }, key) => {
                acc[key] =
                  distances[key] === Infinity
                    ? "‚àû"
                    : distances[key].toString();
                return acc;
              },
              {}
            ),
            pathUpdateInfo: "",
            pathNodes: [],
            pathEdges: [],
          });
          stepByStepExplanation.push(`–ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}: –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–µ–±—Ä–æ "${edgeTitle}", —Å–æ–µ–¥–∏–Ω—è—é—â–µ–µ –≤–µ—Ä—à–∏–Ω—ã "${sourceTitle}" –∏ "${targetTitle}". –¢–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–µ—Ä—à–∏–Ω—ã "${targetTitle}": ${distances[target] === Infinity ? "‚àû" : distances[target]}, –Ω–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${alt === Infinity ? "‚àû" : alt} (${pathComparsion})`);

          if (alt < distances[target]) {
            distances[target] = alt;
            prev[target] = source;
            updated = true;
            
            frames.push({
              currentEdge: edgeId,
              nextNode: target,
              paths: Object.keys(distances).reduce(
                (acc: { [key: string]: string }, key) => {
                  acc[key] =
                    distances[key] === Infinity
                      ? "‚àû"
                      : distances[key].toString();
                  return acc;
                },
                {}
              ),
              pathUpdateInfo: pathComparsion,
              pathNodes: [],
              pathEdges: [],
            });
            stepByStepExplanation.push(`–¢–∞–∫ –∫–∞–∫ ${pathComparsion}, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–µ—Ä—à–∏–Ω—ã "${targetTitle}" –¥–æ ${alt}.`)
          }
        } else {
          [source, target].forEach((start, index) => {
            let end = index === 0 ? target : source;
            let startTitle = cy.getElementById(start).data("title");
            let endTitle = cy.getElementById(end).data("title");
            let edgeTitle = cy.getElementById(edgeId).data("title");
            if (!edgeTitle && edgeId) {
              edgeTitle = `${startTitle}-${endTitle}`;
            }
            let alt = distances[start] + weight;
            let pathComparsion = `${distances[start] === Infinity ? "‚àû" : distances[start]} + ${weight} ${
              alt < distances[end] ? "<" : ">"
            } ${
              distances[end] === Infinity ? "‚àû" : distances[end]
            }`;

            frames.push({
              currentEdge: edgeId,
              nextNode: end,
              paths: Object.keys(distances).reduce(
                (acc: { [key: string]: string }, key) => {
                  acc[key] =
                    distances[key] === Infinity
                      ? "‚àû"
                      : distances[key].toString();
                  return acc;
                },
                {}
              ),
              pathUpdateInfo: "",
              pathNodes: [],
              pathEdges: [],
            });
            stepByStepExplanation.push(`–ò—Ç–µ—Ä–∞—Ü–∏—è ${i + 1}: –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–µ–±—Ä–æ "${edgeTitle}", —Å–æ–µ–¥–∏–Ω—è—é—â–µ–µ –≤–µ—Ä—à–∏–Ω—ã "${startTitle}" –∏ "${endTitle}". –¢–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–µ—Ä—à–∏–Ω—ã "${endTitle}": ${distances[end] === Infinity ? "‚àû" : distances[end]}, –Ω–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${alt === Infinity ? "‚àû" : alt} (${pathComparsion})`);

            if (alt < distances[end]) {
              distances[end] = alt;
              prev[end] = start;
              updated = true;

              frames.push({
                currentEdge: edgeId,
                nextNode: end,
                paths: Object.keys(distances).reduce(
                  (acc: { [key: string]: string }, key) => {
                    acc[key] =
                      distances[key] === Infinity
                        ? "‚àû"
                        : distances[key].toString();
                    return acc;
                  },
                  {}
                ),
                pathUpdateInfo: pathComparsion,
                pathNodes: [],
                pathEdges: [],
              });
              stepByStepExplanation.push(`–¢–∞–∫ –∫–∞–∫ ${pathComparsion}, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–µ—Ä—à–∏–Ω—ã "${endTitle}" –¥–æ ${alt}.`)
            }
          });
        }
      });

      if (!updated) break;
    }

    let hasNegativeCycle = edges.some(({ source, target, weight }) => {
      return distances[source] + weight < distances[target];
    });

    /*if (hasNegativeCycle) {
      stepByStepExplanation.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞.`);
    } else {
      stepByStepExplanation.push(`–¶–∏–∫–ª—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.`);
    }*/

    let resultText = "";
    let shortResultText = "";

    if (hasNegativeCycle) {
      shortResultText =
        "–í –≥—Ä–∞—Ñ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.";
    } else {
      let edges: string[] = [];
      for (let at: string | null = endNodeId; at !== null; at = prev[at]) {
        if (prev[at] !== null) {
          let edge = cy.edges().filter(function (ele) {
            return (
              (ele.data("source") === prev[at!] && ele.data("target") === at) ||
              (ele.data("target") === prev[at!] && ele.data("source") === at)
            );
          });
          edges.push(edge.id());
        }
      }
      edges.reverse();

      let pathToEnd = reconstructPath(prev, endNodeId);
      let pathTitles = pathToEnd.map(
        (nodeId) => `"${cy.getElementById(nodeId).data("title")}"`
      );
      let pathString = pathToEnd.includes(startNodeId)
        ? pathTitles.join(" ü†ñ ")
        : "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
      let allShortPaths = "";
      let sortedNodes = cy.nodes().sort((a, b) =>
        Number(a.id()) - Number(b.id())
      );
      sortedNodes.forEach((node) => {
        let nodeId = node.id();
        let nodeTitle = node.data("title");
        if (distances[nodeId] !== Infinity) {
          let path = reconstructPath(prev, nodeId);
          let pathTitles = path.map(
            (nodeId) => `"${cy.getElementById(nodeId).data("title")}"`
          );
          allShortPaths += `  - **–í–µ—Ä—à–∏–Ω–∞ "${nodeTitle}": –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ -** ${
            distances[nodeId]
          }, **–ü—É—Ç—å -** ${pathTitles.join(" ü†ñ ")}\n`;
        } else {
          allShortPaths += `  - **–í–µ—Ä—à–∏–Ω–∞ "${nodeTitle}": –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ -** ‚àû, **–ü—É—Ç—å -** –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n`;
        }
      });

      const totalVertices = cy.nodes().length;
      const totalEdges = cy.edges().length;
      const steps = frames.length;
      const visitedVerticesCount = pathToEnd.length;
      const visitedEdgesCount = edges.length;

      shortResultText = `–ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –æ—Ç –≤–µ—Ä—à–∏–Ω—ã "${startNodeTitle}" –¥–æ –≤–µ—Ä—à–∏–Ω—ã "${endNodeTitle}": ${pathString}  
      –î–ª–∏–Ω–∞ –ø—É—Ç–∏: ${
        distances[endNodeId] === Infinity ? "‚àû" : distances[endNodeId]
      }`;
      stepByStepExplanation.push(shortResultText);
      frames.push({
        currentEdge: "",
        nextNode: "",
        paths: Object.keys(distances).reduce(
          (acc: { [key: string]: string }, key) => {
            acc[key] =
              distances[key] === Infinity ? "‚àû" : distances[key].toString();
            return acc;
          },
          {}
        ),
        pathUpdateInfo: "",
        pathNodes: pathToEnd,
        pathEdges: edges,
      });

      resultText = `### –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ë–µ–ª–ª–º–∞–Ω–∞-–§–æ—Ä–¥–∞

**–ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞:** "${startNodeTitle}"  
**–ö–æ–Ω–µ—á–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞:** "${endNodeTitle}"

**–ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –¥–æ –∫–æ–Ω–µ—á–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã:** ${pathString}  
**–î–ª–∏–Ω–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏:** ${distances[endNodeId] === Infinity ? "‚àû" : distances[endNodeId]}  

**–ü–æ—à–∞–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:**

${stepByStepExplanation
  .map((step, index) => {
    return `${index + 1}. ${step}`;
  })
  .join("\n")}

**–ö—Ä–∞—Ç—á–∞–π—à–∏–µ –ø—É—Ç–∏ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã –¥–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö:**
${allShortPaths}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- **–í—Å–µ–≥–æ –≤–µ—Ä—à–∏–Ω –≤ –≥—Ä–∞—Ñ–µ:** ${totalVertices}
- **–í—Å–µ–≥–æ —Ä—ë–±–µ—Ä –≤ –≥—Ä–∞—Ñ–µ:** ${totalEdges}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏:** ${visitedVerticesCount}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏:** ${visitedEdgesCount}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:** ${steps}

**–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± –∞–ª–≥–æ—Ä–∏—Ç–º–µ –ë–µ–ª–ª–º–∞–Ω–∞-–§–æ—Ä–¥–∞ –º–æ–∂–Ω–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π [—Å—Å—ã–ª–∫–µ](https://ru.wikipedia.org/wiki/–ê–ª–≥–æ—Ä–∏—Ç–º_–ë–µ–ª–ª–º–∞–Ω–∞_‚Äî_–§–æ—Ä–¥–∞).**`;
    }

    function reconstructPath(
      prev: { [key: string]: string | null },
      to: string | null
    ) {
      let path = [];
      for (let at = to; at !== null; at = prev[at]) {
        if (at !== null) {
          path.push(at);
        }
      }
      path.reverse();
      return path;
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ resultText
    //let resultText = generateResultText(distances, prev, startNodeId, endNodeId, hasNegativeCycle, cy);

    return { frames, shortResultText, resultText, stepByStepExplanation, hasNegativeCycle }
  }

  const { frames, shortResultText, resultText, stepByStepExplanation, hasNegativeCycle } =
    bellmanFord(cy, startNodeId, endNodeId);

  return NextResponse.json({
    frames: frames,
    shortResultText: shortResultText,
    resultText: resultText,
    stepByStepExplanation: stepByStepExplanation,
    hasNegativeCycle: hasNegativeCycle,
  });
}
