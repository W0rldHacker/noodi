import cytoscape, { Core, NodeSingular } from "cytoscape";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  const { graph, needCycle } = await req.json();

  const cy = cytoscape({
    elements: graph.elements,
  });

  function findHamiltonianPath(
    cy: Core,
    startNodeId: string,
    needCycle: boolean
  ) {
    let path = [startNodeId];
    let visitedNodes = new Set([startNodeId]);
    let visitedEdges = new Set();
    let found = false;
    let cycle: string[] = [];
    let frames: any[] = [];
    let stepByStepExplanation: string[] = [];

    function backtrack(currentNodeId: string, prevNodeId: string) {
      const currentNodeTitle = cy.getElementById(currentNodeId).data("title");
      let stepDescription =
        currentNodeId !== startNodeId
          ? `–ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç –≤–µ—Ä—à–∏–Ω—ã \"${cy
              .getElementById(prevNodeId)
              .data("title")}\" –∫ –≤–µ—Ä—à–∏–Ω–µ \"${currentNodeTitle}\"`
          : `–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ö–æ–¥ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã "${currentNodeTitle}"`;
      stepByStepExplanation.push(stepDescription);
      frames.push({
        visitedNodes: Array.from(visitedNodes),
        visitedEdges: Array.from(visitedEdges),
      });

      if (path.length === cy.nodes().length) {
        if (needCycle) {
          let lastNode = cy.getElementById(currentNodeId);
          let startNode = cy.getElementById(startNodeId);
          if (isEdgeValid(lastNode, startNode)) {
            visitedEdges.add(lastNode.edgesWith(startNode).first().id());
            found = true;
            cycle = [...path, startNodeId];
            stepByStepExplanation.push(
              `–ì–∞–º–∏–ª—å—Ç–æ–Ω–æ–≤ —Ü–∏–∫–ª: ${cycle.join(" ü†ñ ")}`
            );
            frames.push({
              visitedNodes: Array.from(visitedNodes),
              visitedEdges: Array.from(visitedEdges),
            });
            return true;
          }
          return false;
        } else {
          found = true;
          stepByStepExplanation.push(`–ì–∞–º–∏–ª—å—Ç–æ–Ω–æ–≤ –ø—É—Ç—å: ${path.join(" ü†ñ ")}`);
          frames.push({
            visitedNodes: Array.from(visitedNodes),
            visitedEdges: Array.from(visitedEdges),
          });
          return true;
        }
      }

      let sortedNeighbors = cy
        .getElementById(currentNodeId)
        .neighborhood()
        .nodes()
        .sort((a, b) => Number(a.id()) - Number(b.id()));
      sortedNeighbors.forEach((neighbor) => {
        let neighborId = neighbor.id();
        let edge = cy.getElementById(currentNodeId).edgesWith(neighbor).first();
        if (
          !visitedNodes.has(neighborId) &&
          isEdgeValid(cy.getElementById(currentNodeId), neighbor)
        ) {
          path.push(neighborId);
          visitedNodes.add(neighborId);
          if (edge) {
            visitedEdges.add(edge.id());
          }
          if (backtrack(neighborId, currentNodeId)) {
            return true;
          }
          if (!found) {
            path.pop();
            visitedNodes.delete(neighborId);
            if (edge) visitedEdges.delete(edge.id());
            stepByStepExplanation.push(
              `–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ –≤–µ—Ä—à–∏–Ω—ã \"${cy
                .getElementById(neighborId)
                .data("title")}\" –∫ –≤–µ—Ä—à–∏–Ω–µ \"${currentNodeTitle}\"`
            );
            frames.push({
              visitedNodes: Array.from(visitedNodes),
              visitedEdges: Array.from(visitedEdges),
            });
          }
        }
      });
      return false;
    }

    function isEdgeValid(sourceNode: NodeSingular, targetNode: NodeSingular) {
      let edge = sourceNode.edgesWith(targetNode).first();
      if (!edge.id()) return false;
      if (edge.hasClass("oriented")) {
        return edge.source().id() === sourceNode.id();
      }
      return true;
    }

    backtrack(startNodeId, "");

    if (!found) {
      stepByStepExplanation.push(
        `–ì–∞–º–∏–ª—å—Ç–æ–Ω–æ–≤ ${needCycle ? "—Ü–∏–∫–ª" : "–ø—É—Ç—å"} –Ω–µ –Ω–∞–π–¥–µ–Ω`
      );
      frames.push({
        visitedNodes: [],
        visitedEdges: [],
      });
    }

    const totalVertices = cy.nodes().length;
    const totalEdges = cy.edges().length;
    const steps = frames.length;
    const shortResultText = `–ì–∞–º–∏–ª—å—Ç–æ–Ω–æ–≤ ${
      needCycle
        ? `—Ü–∏–∫–ª${found ? `: ${cycle.join(" ü†ñ ")}` : " –Ω–µ –Ω–∞–π–¥–µ–Ω"}`
        : `–ø—É—Ç—å${found ? `: ${path.join(" ü†ñ ")}` : " –Ω–µ –Ω–∞–π–¥–µ–Ω"}`
    }`;

    const resultText = `### –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≥–∞–º–∏–ª—å—Ç–æ–Ω–æ–≤–∞ ${
      needCycle ? "—Ü–∏–∫–ª–∞" : "–ø—É—Ç–∏"
    }  

**–ì–∞–º–∏–ª—å—Ç–æ–Ω–æ–≤ ${
      needCycle
        ? `—Ü–∏–∫–ª${found ? `:** ${cycle.join(" ü†ñ ")}` : "** –Ω–µ –Ω–∞–π–¥–µ–Ω"}`
        : `–ø—É—Ç—å${found ? `:** ${path.join(" ü†ñ ")}` : " –Ω–µ –Ω–∞–π–¥–µ–Ω"}`
    }  

**–ü–æ—à–∞–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:**
${stepByStepExplanation
  .map((step, index) => {
    return `${index + 1}. ${step}`;
  })
  .join("\n")}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**  
- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω: ${totalVertices}  
- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä –≥—Ä–∞—Ñ–∞: ${totalEdges}  
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: ${steps}  

**–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± –∞–ª–≥–æ—Ä–∏—Ç–º–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ì–∞–º–∏–ª—å—Ç–æ–Ω–æ–≤–∞ ${
      needCycle ? "—Ü–∏–∫–ª–∞" : "–ø—É—Ç–∏"
    } –º–æ–∂–Ω–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π [—Å—Å—ã–ª–∫–µ](https://ru.wikipedia.org/wiki/–ì–∞–º–∏–ª—å—Ç–æ–Ω–æ–≤_–≥—Ä–∞—Ñ).**`;

    return { frames, shortResultText, resultText, stepByStepExplanation };
  }

  const { frames, shortResultText, resultText, stepByStepExplanation } =
    findHamiltonianPath(cy, cy.nodes()[0].id(), needCycle);

  return NextResponse.json({
    frames: frames,
    shortResultText: shortResultText,
    resultText: resultText,
    stepByStepExplanation: stepByStepExplanation,
  });
}
