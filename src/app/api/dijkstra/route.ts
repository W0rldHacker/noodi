import cytoscape, { Core } from "cytoscape";
import { NextResponse } from "next/server";
import { PriorityQueue } from "@/utils/PriorityQueue";

export async function POST(req: Request) {
  const { graph, startNodeId, endNodeId } = await req.json();

  const cy = cytoscape({
    elements: graph.elements,
  });

  function dijkstra(cy: Core, startNodeId: string, endNodeId: string) {
    let distances: { [key: string]: number } = {};
    let prev: { [key: string]: string | null } = {};
    let visited = new Set();
    let pq = new PriorityQueue<string>();
    let frames: any[] = [];
    const startNodeTitle: string = cy.getElementById(startNodeId).data("title");
    const endNodeTitle: string = cy.getElementById(endNodeId).data("title");
    let stepByStepExplanation: string[] = [`–ù–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—à–∏–Ω—ã "${startNodeTitle}", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–µ—ë —Ä–∞–≤–Ω—ã–º 0`];

    cy.nodes().forEach((node) => {
      let nodeId = node.id();
      distances[nodeId] = Infinity;
      prev[nodeId] = null;
      pq.enqueue(nodeId, Infinity);
    });

    distances[startNodeId] = 0;
    pq.enqueue(startNodeId, 0);

    while (!pq.isEmpty()) {
      let { element: nodeId, priority: distance } = pq.dequeue()!;
      if (visited.has(nodeId)) continue;
      let nodeTitle = cy.getElementById(nodeId).data("title");

      frames.push({
        fullyProcessedNodes: Array.from(visited),
        currentNode: nodeId,
        //nextNode: "",
        currentEdge: "",
        paths: Object.keys(distances).reduce(
          (acc: { [key: string]: string }, key) => {
            acc[key] =
              distances[key] === Infinity
                ? "‚àû"
                : distances[key].toString();
            return acc;
          },
          {}
        ),
        pathUpdateInfo: "",
        pathNodes: [],
        pathEdges: [],
      });
      if (nodeId !== startNodeId) {
        stepByStepExplanation.push(`–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –≤–µ—Ä—à–∏–Ω—É "${nodeTitle}" —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º ${distance === Infinity ? "‚àû" : distance}`);
      }

      cy.getElementById(nodeId)
        .connectedEdges()
        .forEach((edge) => {
          let isDirected = edge.hasClass("oriented");
          let sourceId = edge.source().id();
          let targetId = edge.target().id();
          let nextNodeId =
            sourceId === nodeId ? targetId : sourceId;  
          const nextNodeTitle = cy.getElementById(nextNodeId).data("title");
          let edgeTitle = edge.data("title");
          if (!edgeTitle && edge.id()) {
            edgeTitle = `${nodeId}-${nextNodeId}`;
          }

          if ((isDirected && sourceId === nodeId) || !isDirected) {
            let weight = edge.data("weight");
            let alt = distance + weight;

            let pathComparison = `${distances[nodeId] === Infinity ? "‚àû" : distances[nodeId]} + ${weight} ${
              alt < distances[nextNodeId] ? "<" : ">"
            } ${
              distances[nextNodeId] === Infinity ? "‚àû" : distances[nextNodeId]
            }`;

            frames.push({
              fullyProcessedNodes: Array.from(visited),
              currentNode: nodeId,
              //nextNode: nextNodeId,
              currentEdge: edge.id(),
              paths: Object.keys(distances).reduce(
                (acc: { [key: string]: string }, key) => {
                  acc[key] =
                    distances[key] === Infinity
                      ? "‚àû"
                      : distances[key].toString();
                  return acc;
                },
                {}
              ),
              pathUpdateInfo: pathComparison,
              pathNodes: [],
              pathEdges: [],
            });
            stepByStepExplanation.push(`–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–µ–±—Ä–æ "${edgeTitle}" –≤–µ–¥—É—â–µ–µ –∫ –≤–µ—Ä—à–∏–Ω–µ "${nextNodeTitle}". –¢–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distances[targetId] === Infinity ? "‚àû" : distances[targetId]}, –Ω–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${alt === Infinity ? "‚àû" : alt} (${pathComparison})`);

            if (alt < distances[nextNodeId]) {
              frames.push({
                fullyProcessedNodes: Array.from(visited),
                currentNode: nodeId,
                //nextNode: nextNodeId,
                currentEdge: edge.id(),
                paths: Object.keys(distances).reduce(
                  (acc: { [key: string]: string }, key) => {
                    acc[key] =
                      distances[key] === Infinity
                        ? "‚àû"
                        : distances[key].toString();
                    return acc;
                  },
                  {}
                ),
                pathUpdateInfo: pathComparison,
                pathNodes: [],
                pathEdges: [],
              });
              distances[nextNodeId] = alt;
              prev[nextNodeId] = nodeId;
              pq.enqueue(nextNodeId, alt);
              stepByStepExplanation.push(`–¢–∞–∫ –∫–∞–∫ ${pathComparison}, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–µ—Ä—à–∏–Ω—ã "${targetId}" –¥–æ ${alt}.`)

              /*stepByStepExplanation.push(
                `–û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–µ—Ä—à–∏–Ω—ã **${nextNodeId}** –¥–æ **${alt}**.`
              );*/
            }
          }
        });
      visited.add(nodeId);
    }

    let edges: string[] = [];
    for (let at: string | null = endNodeId; at !== null; at = prev[at]) {
      if (prev[at] !== null) {
        let edge = cy.edges().filter(function (ele) {
          return (
            (ele.data("source") === prev[at!] && ele.data("target") === at) ||
            (ele.data("target") === prev[at!] && ele.data("source") === at)
          );
        });
        edges.push(edge.id());
      }
    }
    edges.reverse();

    let pathToEnd = reconstructPath(prev, endNodeId);
    let pathTitles = pathToEnd.map((nodeId) => `"${cy.getElementById(nodeId).data("title")}"`);
    let pathString = pathToEnd.includes(startNodeId) ? pathTitles.join(" ü†ñ ") : "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
    let allShortPaths = "";
    cy.nodes().forEach((node) => {
      let nodeId = node.id();
      let nodeTitle = node.data("title");
      if (distances[nodeId] !== Infinity) {
        let path = reconstructPath(prev, nodeId);
        let pathTitles = path.map((nodeId) => `"${cy.getElementById(nodeId).data("title")}"`);
        allShortPaths += `  - **–í–µ—Ä—à–∏–Ω–∞ "${nodeTitle}": –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ -** ${
          distances[nodeId]
        }, **–ü—É—Ç—å -** ${pathTitles.join(" ü†ñ ")}\n`;
      } else {
        allShortPaths += `  - **–í–µ—Ä—à–∏–Ω–∞ "${nodeTitle}": –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ -** ‚àû, **–ü—É—Ç—å -** –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n`;
      }
    });

    const totalVertices = cy.nodes().length;
    const totalEdges = cy.edges().length;
    const steps = frames.length;
    const visitedVerticesCount = pathToEnd.length;
    const visitedEdgesCount = edges.length;

    const shortResultText = `–ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –æ—Ç –≤–µ—Ä—à–∏–Ω—ã "${startNodeTitle}" –¥–æ –≤–µ—Ä—à–∏–Ω—ã "${endNodeTitle}": ${pathString}  
    –î–ª–∏–Ω–∞ –ø—É—Ç–∏: ${distances[endNodeId] === Infinity ? "‚àû" : distances[endNodeId]}`;
    stepByStepExplanation.push(shortResultText);
    frames.push({
      fullyProcessedNodes: [],
      currentNode: "",
      //nextNode: "",
      currentEdge: "",
      paths: Object.keys(distances).reduce(
        (acc: { [key: string]: string }, key) => {
          acc[key] =
            distances[key] === Infinity ? "‚àû" : distances[key].toString();
          return acc;
        },
        {}
      ),
      pathUpdateInfo: "",
      pathNodes: pathToEnd,
      pathEdges: edges,
    });

    const resultText = `### –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –î–µ–π–∫—Å—Ç—Ä—ã

**–ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞:** "${startNodeTitle}"  
**–ö–æ–Ω–µ—á–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞:** "${endNodeTitle}"

**–ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –¥–æ –∫–æ–Ω–µ—á–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã:** ${pathString}  
**–î–ª–∏–Ω–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏:** ${distances[endNodeId] === Infinity ? "‚àû" : distances[endNodeId]}  

**–ü–æ—à–∞–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:**

${stepByStepExplanation
  .map((step, index) => {
    return `${index + 1}. ${step}`;
  })
  .join("\n")}

**–ö—Ä–∞—Ç—á–∞–π—à–∏–µ –ø—É—Ç–∏ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã –¥–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö:**
${allShortPaths}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
- **–í—Å–µ–≥–æ –≤–µ—Ä—à–∏–Ω –≤ –≥—Ä–∞—Ñ–µ:** ${totalVertices}
- **–í—Å–µ–≥–æ —Ä—ë–±–µ—Ä –≤ –≥—Ä–∞—Ñ–µ:** ${totalEdges}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏:** ${visitedVerticesCount}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏:** ${visitedEdgesCount}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:** ${steps}

**–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± –∞–ª–≥–æ—Ä–∏—Ç–º–µ –î–µ–π–∫—Å—Ç—Ä—ã –º–æ–∂–Ω–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π [—Å—Å—ã–ª–∫–µ](https://ru.wikipedia.org/wiki/–ê–ª–≥–æ—Ä–∏—Ç–º_–î–µ–π–∫—Å—Ç—Ä—ã).**`;

    function reconstructPath(
      prev: { [key: string]: string | null },
      to: string | null
    ) {
      let path = [];
      for (let at = to; at !== null; at = prev[at]) {
        if (at !== null) {
          path.push(at);
        }
      }
      path.reverse();
      return path;
    }

    /*function findPathEdges(cy: Core, path: string[]) {
      let edges = [];
      for (let i = 0; i < path.length - 1; i++) {
        let edge = cy.edges().filter((edge) => {
          let source = edge.data("source");
          let target = edge.data("target");
          return (
            (source === path[i] && target === path[i + 1]) ||
            (source === path[i + 1] && target === path[i])
          );
        });
        if (edge.length > 0) {
          edges.push(edge.id());
        }
      }
      return edges;
    }*/

    return { frames, shortResultText, resultText, stepByStepExplanation };
  }

  const { frames, shortResultText, resultText, stepByStepExplanation } =
    dijkstra(cy, startNodeId, endNodeId);

  return NextResponse.json({
    frames: frames,
    shortResultText: shortResultText,
    resultText: resultText,
    stepByStepExplanation: stepByStepExplanation,
  });
}
